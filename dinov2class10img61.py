# -*- coding: utf-8 -*-
"""dinov2class10img61.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qYXZsLfuutqW0G0eppLMoJYq724LbTbo
"""

# Gerekirse: !pip install torch torchvision
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms, models
import os

# Eğer Google Drive'daysa:
from google.colab import drive
drive.mount('/content/drive')
DATA_DIR = '/content/drive/MyDrive/Dinov2Demo/datasetv3'

from sklearn.model_selection import train_test_split
import shutil
import os

def split_dataset(dataset_root, train_ratio=0.8):
    # Tüm resimleri ve sınıfları belirle
    classes = [d for d in os.listdir(dataset_root) if os.path.isdir(os.path.join(dataset_root, d))]
    train_root = f"{dataset_root}_train"
    val_root = f"{dataset_root}_val"
    os.makedirs(train_root, exist_ok=True)
    os.makedirs(val_root, exist_ok=True)

    for cls in classes:
        imgs = os.listdir(os.path.join(dataset_root, cls))
        train_imgs, val_imgs = train_test_split(imgs, train_size=train_ratio, random_state=42)
        os.makedirs(os.path.join(train_root, cls), exist_ok=True)
        os.makedirs(os.path.join(val_root, cls), exist_ok=True)
        for i in train_imgs:
            shutil.copy(os.path.join(dataset_root, cls, i), os.path.join(train_root, cls, i))
        for i in val_imgs:
            shutil.copy(os.path.join(dataset_root, cls, i), os.path.join(val_root, cls, i))
    return train_root, val_root

train_dir, val_dir = split_dataset(DATA_DIR)
print(train_dir, val_dir)

# Augmentation
transform_train = transforms.Compose([
    transforms.RandomResizedCrop(518), # Changed to 518
    transforms.RandomHorizontalFlip(),
    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1),
    transforms.ToTensor(),
    transforms.Normalize([0.485,0.456,0.406],[0.229,0.224,0.225]),
])

transform_val = transforms.Compose([
    transforms.Resize((518, 518)), # Changed to 518
    transforms.ToTensor(),
    transforms.Normalize([0.485,0.456,0.406],[0.229,0.224,0.225]),
])

train_ds = datasets.ImageFolder(train_dir, transform=transform_train)
val_ds = datasets.ImageFolder(val_dir, transform=transform_val)

# Batch size küçük! Çünkü dataset küçük!
train_loader = torch.utils.data.DataLoader(train_ds, batch_size=4, shuffle=True, num_workers=2)
val_loader = torch.utils.data.DataLoader(val_ds, batch_size=4, shuffle=False, num_workers=2)

print(f'Train samples: {len(train_ds)}')
print(f'Validation samples: {len(val_ds)}')

# HuggingFace ile DINOv2 yükleme (bu notebook için Huggingface ve timm ile kolay)
!pip install timm

import timm
import torch.nn as nn
import torch.optim as optim

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
# Check available DINOv2 models in timm:
print(timm.list_models("*dinov2*", pretrained=True))
# Use a recognized model name, for example: 'dinov2_vitb14'
model = timm.create_model('vit_base_patch14_dinov2.lvd142m', pretrained=True, num_classes=10)
model = model.to(device)

# Sadece son katmanı eğit
for param in model.parameters():
    param.requires_grad = False
for param in model.head.parameters():
    param.requires_grad = True  # Sadece head

optimizer = optim.Adam(model.head.parameters(), lr=0.002)
criterion = nn.CrossEntropyLoss()

import numpy as np

patience = 5
best_acc = 0.0
epochs = 30
trigger_times = 0

for epoch in range(epochs):
    model.train()
    for images, labels in train_loader:
        images = images.to(device); labels = labels.to(device)
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

    # Validation
    model.eval()
    correct, total = 0, 0
    val_losses = []
    with torch.no_grad():
        for images, labels in val_loader:
            images = images.to(device); labels = labels.to(device)
            outputs = model(images)
            loss = criterion(outputs, labels)
            val_losses.append(loss.item())
            _, preds = torch.max(outputs, 1)
            correct += (preds == labels).sum().item()
            total += labels.size(0)
    val_acc = correct / total
    print(f"Epoch {epoch+1}: val acc: {val_acc:.3f}, val_loss: {np.mean(val_losses):.4f}")

    if val_acc > best_acc:
        best_acc = val_acc
        torch.save(model.state_dict(), 'best_dinov2_head_class10_img61.pth')
        trigger_times = 0
    else:
        trigger_times += 1
        if trigger_times >= patience:
            print("Early stopping! No improvement for", patience, "epochs.")
            break